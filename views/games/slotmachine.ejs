<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/css/slotmachine.css">
</head>
<body>
<div class="container">
  <div class="app">
    <img src="/img/jackpotMachine.png" alt="">
    <div class="row">
        <div class="doors">
            <div class="door" data-last-displayed="4">
                <div class="boxes">
                </div>
            </div>
        
            <div class="door" data-last-displayed="4">
                <div class="boxes">
                </div>
            </div>
        
            <div class="door" data-last-displayed="4">
                <div class="boxes">
                </div>
            </div>
        </div>
        <div id="leverControl" class="lever-control">
          <div class="lever">
            <div class="knob"></div>
            <div class="stick"></div>
          </div>
          <div class="lever-base">
            <div class="pivot"></div>
          </div>
        </div>
    </div>
    <img src="/img/jackpotStickBase.png" alt="">
  </div>

  <div class="inters">
    <div class="row">
      <div class="inf">
        <span>Egyenleg:</span>
        <span class="currency"></span>
      </div>
      <div class="inf">
        <span>T√©t: (Max: 20000 Ft)</span>
        <input class="bet" type="number" min="1000" max="20000" value="1000" placeholder="T√©t">
      </div>
    </div>

    <div class="row">
      <button class="onebet">+1000</button>
      <button class="maxbet">Max t√©t</button>
      <button class="spin">P√∂rget√©s</button>
    </div>
  </div>

</div>

</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
<script>
var currency = document.querySelector('.currency')
var bet = document.querySelector('.bet')
const doors = document.querySelectorAll(".door")
currency.innerHTML = sessionStorage.getItem("currency")

function checkwin()
{

  var dict = 
  {
    "üóø": 0,
    "üí∏": 0,
    "üìâ": 0,
    "üí©": 0,
    "üëé": 0,
    "üçÄ": 0,
    "üí∞": 0,
    "üç£": 0,
    "‚ùå": 0
  }

  for (var door of doors)
  {
    for (var key in dict)
    {
      if (key == door.dataset.lastDisplayed)
      {
        dict[key] = dict[key]+1
      }
    }
  }

  var items = Object.keys(dict).map(function(key) {
    return [key, dict[key]];
  });

  items.sort(function(a, b) {
    return b[1] - a[1];
  });

  console.log(items[0])

  if (items[0][1] == 2)
  {
    currency.innerHTML = currency.innerHTML*1 + bet.value*2
  }

  if (items[0][1] == 3)
  {
    if (items[0][0] != "‚ùå") currency.innerHTML = currency.innerHTML*1 + bet.value*10
  }
  
}

const leverControl = document.querySelector('.lever-control')
var animationRunning = false

const items = [
  "üóø",
  "üí∏",
  "üìâ",
  "üí©",
  "üëé",
  "üçÄ",
  "üí∞",
  "üç£",
  "‚ùå"
]

async function spin() {
  init(1, 2);
  for (const door of doors) {
    const boxes = door.querySelector(".boxes");
    const duration = parseInt(boxes.style.transitionDuration);
    boxes.style.transform = "translateY(0)";
    await new Promise((resolve) => setTimeout(resolve, duration * 100));
  }
}

function init(groups = 1, duration = 1) {
  for (const door of doors) {
    const boxes = door.querySelector(".boxes");
    const boxesClone = boxes.cloneNode(false);
    
    
    const pool = [door.dataset.lastDisplayed];
      
      const arr = [];
      for (let n = 0; n < (groups > 0 ? groups : 1); n++) {
          arr.push(...items);
      }
      pool.push(...shuffle(arr));
      boxesClone.addEventListener("transitionstart", function () {
          this.querySelectorAll(".box").forEach((box) => {
            box.style.filter = "blur(1px)";
          });
        }
      );
      boxesClone.addEventListener(
        "transitionend",
        function () 
        {
          this.querySelectorAll(".box").forEach((box, index) => {
            box.style.filter = "blur(0)";
            if (index > 0) this.removeChild(box);
          });
          door.dataset.lastDisplayed = door.querySelector(".box").innerHTML
          
        }
      );
    for (let i = pool.length - 1; i >= 0; i--) {
      const box = document.createElement("div");
      box.classList.add("box");
      box.style.width = door.clientWidth + "px";
      box.style.height = door.clientHeight + "px";
      box.textContent = pool[i];
      boxesClone.appendChild(box);
    }
    boxesClone.style.transitionDuration = `${duration > 0 ? duration : 1}s`;
    boxesClone.style.transform = `translateY(-${ door.clientHeight * (pool.length - 1) }px)`;
    door.replaceChild(boxesClone, boxes);
    
  }
}

function shuffle([...arr]) {
  let m = arr.length;
  while (m) {
    const i = Math.floor(Math.random() * m--);
    [arr[m], arr[i]] = [arr[i], arr[m]];
  }
  return arr;
}
init()

document.querySelector('.onebet').addEventListener('click', () => {
  if (bet.value*1 < 20000) {
    bet.value = bet.value*1 + 1000
  }
})

document.querySelector('.maxbet').addEventListener('click', () => {
  bet.value = 20000
})

document.querySelector('.spin').addEventListener('click', () => {
  if (currency.innerHTML*1 >= bet.value && bet.value >= 1000 && bet.value <= 20000)
  {
    if (!animationRunning)
    {
      currency.innerHTML = currency.innerHTML*1 - bet.value
      animationRunning = true
      spin()
      gsap.fromTo(".lever", { rotate: -70 }, 
      {
        rotate: 70,
        duration: ".8",
        repeat: 0,
        ease: "Sine.out"
      })
      setTimeout(() => {
        gsap.fromTo(".lever", {
        rotate: 70
        }, 
        {
        rotate: -70,
        duration: ".4",
        repeat: 0,
        ease: "Sine.out"
        })
      }, 1200)
      setTimeout(() => {
        checkwin()
        animationRunning = false
      }, 2500)
    }
  }
  else if (bet.value <= 1000 || bet.value >= 20000)
  {
    shake(bet)
  }
  else if (!animationRunning)
  {
    shake(currency)
  }
})

function shake(element)
{
  if (!element.classList.contains('animation'))
    {
      element.classList.add('animation')
      setTimeout(() => {
        element.classList.remove('animation')
      }, 400);
    }
}
</script>
</html>